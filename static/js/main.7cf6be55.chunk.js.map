{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["emojiDictionary","App","useState","emoji","setEmoji","meaning","setMeaning","className","onKeyDown","event","inputEmoji","target","value","placeholder","style","padding","minWidth","Object","keys","map","onClick","fontSize","cursor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAKMA,EAAgB,CACpB,eAAK,WACL,eAAK,YACL,eAAK,MACL,eAAK,cACL,eAAK,OACL,eAAK,aAwDQC,MArDf,WAAe,IAAD,EACeC,qBADf,mBACDC,EADC,KACKC,EADL,OAEoBF,qBAFpB,mBAEDG,EAFC,KAEOC,EAFP,KAqBV,OACE,sBAAKC,UAAU,MAAf,UACI,iDACA,uBAAOC,UAnBb,SAAuBC,GACrB,IAAMC,EAAYD,EAAME,OAAOC,MAC/BR,EAASM,GACNA,KAAcV,GACbI,EAASM,GACTJ,EAAWN,EAAgBU,KAG3BJ,EAAW,oCAWsBO,YAAa,oBAC9CC,MAAO,CACLC,QAAQ,OACRC,SAAS,SAGX,6BAAKb,IACL,6BAAKE,IAGHY,OAAOC,KAAKlB,GAAiBmB,KAAI,SAAShB,GACzC,OACC,sBACAiB,QAAS,WAnBfd,EAAWN,EAoBeG,KAEpBW,MAAO,CAAEO,SAAU,OAAQN,QAAS,SAAUO,OAAQ,WAJtD,SAMCnB,WC5CAoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.7cf6be55.chunk.js","sourcesContent":["import React from \"react\";\nimport {useState} from \"react\";\nimport './index.css';\n\n\nconst emojiDictionary={\n  \"üòä\":\"smilling\",\n  \"üò≥\":\"disbelief\",\n  \"üòî\":\"sad\",\n  \"ü•°\":\"takeout box\",\n  \"‚ù§Ô∏è\":\"Love\",\n  \"üòë\":\"annoyance\"\n}\n\nfunction App(){\n      const [emoji,setEmoji]=useState();\n      const [meaning,setMeaning]= useState();\n\n\n    function changeHandler(event){\n      const inputEmoji =event.target.value;\n      setEmoji(inputEmoji);\n      if(inputEmoji in emojiDictionary){\n          setEmoji(inputEmoji);\n          setMeaning(emojiDictionary[inputEmoji]);\n      }\n     else{\n          setMeaning(\"failure to recognise this emoji\");    \n     } \n   }\n\n   function clickEmojiHandler(clickedEmoji){\n        setMeaning(emojiDictionary[clickedEmoji]);\n   }\n\n    return(\n      <div className=\"App\"> \n          <h1>inside outttttt</h1>\n          <input onKeyDown={changeHandler} placeholder={\"search your emoji\"}\n          style={{\n            padding:\"1rem\",\n            minWidth:\"80%\"\n          }}\n          />\n          <h2>{emoji}</h2>\n          <h3>{meaning}</h3>\n\n          {\n            Object.keys(emojiDictionary).map(function(emoji){  \n             return(\n              <span\n              onClick={function(){ \n                clickEmojiHandler(emoji)}\n              }\n              style={{ fontSize: \"2rem\", padding: \"0.5rem\", cursor: \"pointer\" }}\n            >\n              {emoji}\n            </span>\n             )})\n          }\n      </div>\n)\n}\n\n\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}